链的结构体：
    type Chain struct {
        // 链上下文
        ctx *common.ChainCtx
        // log
        log logs.Logger
        // 矿工
        miner *miner.Miner
        // 依赖代理组件
        relyAgent common.ChainRelyAgent

        // 提交交易cache
        txIdCache *cache.Cache
    }
    type ChainCtx struct {
        // 基础上下文
        xctx.BaseCtx
        // 引擎上下文
        EngCtx *EngineCtx
        // 链名
        BCName string
        // 账本
        Ledger *ledger.Ledger
        // 状态机
        State *state.State
        // 合约
        Contract contract.Manager
        // 共识
        Consensus consensus.ConsensusInterface
        // 加密
        Crypto cryptoBase.CryptoClient
        // 权限
        Acl aclBase.AclManager
        // 治理代币
        GovernToken governToken.GovManager
        // 提案
        Proposal propose.ProposeManager
        // 定时任务
        TimerTask timerTask.TimerManager
        // 结点账户信息
        Address *xaddress.Address
        // 异步任务
        Asyncworker AsyncworkerAgent
    }
账本创建过程
    wen_LoadChain_加载链
    wen_initChainCtx_engin：初始化链依赖上下文
    wen_实例化账本:
    wen__CreateLedger_engine(rely):创建账本
    wen_NewLedgerCtx_bcs：创建账本运行上下文环境
    wen_OpenLgder___bcs：打开账本
    wen_newLedger___bcs：创建账本实例

状态机创建过程：
    wen_LoadChain_加载链
    wen_initChainCtx_engin：初始化链依赖上下文
    wen_实例化状态机_engine:通过链的依赖组件
    wen_CreateState_engins(rely):创建状态机
    wen_NewStateCtx_bcs:状态机运行上下文环境
    wen_NewState_bcs:创建状态机



